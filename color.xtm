

;; TYPES
(bind-type Colour <double,double,double,double>);;HSLA colour - values are [0,1]

(bind-type RGB <double,double,double>)
(bind-type HSL <double,double,double>)

;; GETTERS

(bind-func rgb_r
  (lambda (rgb:RGB*)
  	(tref rgb 0)))

(bind-func rgb_g
  (lambda (rgb:RGB*)
    (tref rgb 1)))

(bind-func rgb_b
  (lambda (rgb:RGB*)
    (tref rgb 2)))

(bind-func hsl_h
  (lambda (hsl:Colour*)
    (tref hsl 0)))

(bind-func hsl_s
  (lambda (hsl:Colour*)
    (tref hsl 1)))

(bind-func hsl_l
  (lambda (hsl:Colour*)
    (tref hsl 2)))


;; CONVERSION

(bind-func colour_from_hsl
  (lambda (h:double s:double l:double)
  		(Colour h s l 1.0)))

(bind-func colour_from_hsla
  (lambda (h:double s:double l:double a:double)
  		(Colour h s l a)))

(bind-func colour_from_rgba
  (lambda (r:double g:double b:double a:double)
  		(let ((max_val:double (cond ((>= r g) r)((>= g b) g)(else b)))
  			  (min_val:double (cond ((<= r g) r)((<= g b) g)(else b))))
	  		(let ((l:double (/ (+ max_val min_val) 2.0)))
	  			(if (= max_val min_val) 
	  				(Colour 0.0 0.0 l a) 
	  				(let ((delta:double (- max_val min_val))
	  					  (s:double (if (> l 0.5) (/ delta (- (- 2.0 max_val) min_val)) (/ delta (+ max_val min_val))))
	  					  (h:double (cond ((= max_val r) (/ (+ (/ (- g b) delta) (if (< g b) 6.0 0.0)) 6.0))
	  					  		  		  ((= max_val g) (/ (+ (/ (- b r) delta) 2.0) 6.0))
	  					  	      		  (else (/ (+ (/ (- r g) delta) 4.0) 6.0)))))
	  					  	(Colour h s l a)))))))

(bind-func colour_from_rgb
  (lambda (r:double g:double b:double)
  		(colour_from_rgba r g b 1.0)))



;; Normalises a colour value in the range [0,255] to a decimal within [0,1]
(bind-func colour_normalise
  (lambda (value:double)
  	(cond ((> value 255.0) 1.0)
		  ((< value 0.0) 0.0)
		  (else (/ value 255.0)))))

(bind-func kelvin_to_red
  (lambda (kelvin:double)
  	(if (<= kelvin 66.0) 
  		1.0
  		(let ((red:double (* 329.698727446 (pow (- kelvin 60.0) -0.1332047592)))) 
  				(colour_normalise red)))))

(bind-func kelvin_to_green
  (lambda (kelvin:double)
	(let ((green:double (if (<= kelvin 66.0) 
			(- (* 99.4708025861 (log kelvin)) 161.1195681661) 
			(* (288.1221695283) (pow (- kelvin 60.0) -0.0755148492))))) 
		(colour_normalise green))))

(bind-func kelvin_to_blue
  (lambda (kelvin:double)
  	(if (>= kelvin 66.0) 
  		1.0
  		(if (<= kelvin 19.0) 
  			0.0
  			(let ((blue:double (- (* 138.5177312231 (log (- kelvin 10.0))) 305.0447927307))) 
				(colour_normalise blue))))))

;; Approximation converting kelvin to hsl
(bind-func colour_from_temperature
  (lambda (kelvin:i32)
	(let ((kelvin_h:double (/ (i32tod kelvin) 100.0)))		
		(colour_from_rgb 
  			(kelvin_to_red kelvin_h) (kelvin_to_green kelvin_h) (kelvin_to_blue kelvin_h)))))

(bind-func rgb_from_temperature
  (lambda (kelvin:i32)
  	(let ((kelvin_h:double (/ (i32tod kelvin) 100.0)))
  		;(println (kelvin_to_red kelvin_h))
  		;(println (kelvin_to_green kelvin_h))
  		;(println (kelvin_to_blue kelvin_h))
  		(RGB 
  			(kelvin_to_red kelvin_h) (kelvin_to_green kelvin_h) (kelvin_to_blue kelvin_h)))))

(rgb_b (rgb_from_temperature 10000))

;; (bind-func colour_from_hex
;;   (lambda ()
;;     ))

;; (bind-func colour_from_cmyk
;;   (lambda ()
;;     ))


;; (bind-func colour_to_rgb
;;   (lambda ()
;;     ))

;; (bind-func colour_to_hsl
;;   (lambda ()
;;     ))



;; SETTERS


;; (bind-func colour_set_red
;;   (lambda ()
;;     ))

;; (bind-func colour_set_green
;;   (lambda ()
;;     ))

;; (bind-func colour_set_blue
;;   (lambda ()
;;     ))

;; (bind-func colour_set_alpha
;;   (lambda ()
;;     ))

;; (bind-func colour_set_hue
;;   (lambda ()
;;     ))

;; (bind-func colour_set_saturation
;;   (lambda ()
;;     ))

;; (bind-func colour_set_lightness
;;   (lambda ()
;;     ))

;; QUANTISATION

;; GENERATORS

;; (bind-func colour_pastel_from_hue
;;   (lambda ()
;;     ))

;; (bind-func colour_fluro_from_hue
;;   (lambda ()
;;     ))



;; PALETTES

;; (bind-func colour_create_tones
;;   (lambda (colour count:i8)
;;     ))

;; (bind-func colour_create_shades
;;   (lambda (colour count:i8)
;;     ))

;; (bind-func colour_create_tints
;;   (lambda (colour count:i8)
;;     ))


;; OPERATORS

;; (bind-func colour_brighten
;;   (lambda (colour)
;;     ))

;; (bind-func colour_darken
;;   (lambda (colour)
;;     ))

;; (bind-func colour_saturate
;;   (lambda (colour)
;;     ))

;; (bind-func colour_unsaturate
;;   (lambda (colour)
;;     ))

;; (bind-func colour_add
;;   (lambda (colour1 colour2)
;;     ))

;; (bind-func colour_difference
;;   (lambda (colour1 colour2)
;;     ))

;; (bind-func colour_multiply
;;   (lambda (colour1 colour2)
;;     ))






